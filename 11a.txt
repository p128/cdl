LEX:
%{
#include<stdio.h>
#include"y.tab.h"
int yylval;
%}
%%
"int"|"float" {return type;}
[a-zA-Z][a-zA-Z0-9]* {return ID;}
[\t]
. {return yytext[0];}
[\n] {return 0;}
[ ] {return 0;}
%%
int yywrap(){
return 1;
}

YACC: 

%{
#include<stdio.h>
int flag=0;
%}
%token type ID
%%
D: T ' ' L;
T: type;
L: L ',' ID| ID;
%%
main(){
printf("enter the expression for the grammar 4\n");
yyparse();
printf("valid experession\n");}
void yyerror()
{%{
#include<stdio.h>
int flag=0;
%}
%token type ID
%% D: T ' ' L;
T: type;
L: L ',' ID| ID;
%%
main(){
printf("enter the expression for the grammar 4\n");
yyparse();
printf("valid experession\n");
}
void yyerror(){
printf("Invalid expression\n"); exit(1);
}
printf("Invalid expression\n"); exit(1); }
